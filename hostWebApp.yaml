trigger:
- main
# - none

variables:
  azureSubscription: 'dicePipeline'
  containerRegistry: 'dockerSC'
  acrName: 'thisacr'
  imageName: 'dicewebview'
  imageTag: 'latest'
  imageRepository: '$(acrName).azurecr.io/$(imageName)'
  artifactName: '$(imageName)_ARTIFACT'
  dockerfilePath: '$(Build.SourcesDirectory)/repo/Dockerfile'
  gitRepoUrl: 'https://github.com/UttU28/Dice-WebView.git'
  gitBranch: 'main'
  webappName: 'dicesaralapply'
  rgName: 'this-dice-jobscraping-rg'

jobs:
- job: Checkout
  displayName: 'Checkout Code'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self

# - job: GetSecrets
#   displayName: 'Get Secrets from Key Vault'
#   dependsOn: Checkout
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: AzureKeyVault@2
#     displayName: 'Get Secrets from Key Vault'
#     inputs:
#       azureSubscription: '$(azureSubscription)'
#       KeyVaultName: 'thisdicekeyvault'
#       SecretsFilter: '*'
#       RunAsPreJob: true

# - job: BuildAndDeploy
#   displayName: 'Build and Deploy'
#   dependsOn: GetSecrets
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - template: buildAndDeploy.yaml
#     parameters:
#       containerRegistry: '$(containerRegistry)'
#       acrName: '$(acrName)'
#       imageName: '$(imageName)'
#       imageTag: '$(imageTag)'
#       dockerfilePath: '$(dockerfilePath)'
#       artifactName: '$(artifactName)'
#       imageRepository: '$(imageRepository)'
#       gitRepoUrl: '$(gitRepoUrl)'
#       gitBranch: '$(gitBranch)'

# - job: Terraform
#   displayName: 'Deploy Terraform Infrastructure'
#   dependsOn: BuildAndDeploy
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - template: terraformTasks.yaml
#     parameters:
#       workingDirectory: 'webApp'

- job: ExtractTerraformOutput
  displayName: 'Extract Terraform Output'
  # dependsOn: Terraform
  dependsOn: Checkout
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureCLI@2
    displayName: 'Extract Terraform Output'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: bash
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        CONTAINER_APP_URL=$(az containerapp show \
          --resource-group $(rgName) \
          --name $(webappName) \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)

        # Set the pipeline variable
        echo "##vso[task.setvariable variable=containerAppUrl]$CONTAINER_APP_URL"

  - task: AzureCLI@2
    displayName: 'Print Terraform Output'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: bash
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        echo "Container App URL is: $(containerAppUrl)"
