trigger:
- main
# - none

variables:
  azureSubscription: 'dicePipeline'
  containerRegistry: 'dockerSC'
  acrName: 'thisacr'
  imageName: 'dicewebview'
  imageTag: 'latest'
  imageRepository: '$(acrName).azurecr.io/$(imageName)'
  artifactName: '$(imageName)_ARTIFACT'
  dockerfilePath: '$(Build.SourcesDirectory)/repo/Dockerfile'
  gitRepoUrl: 'https://github.com/UttU28/Dice-WebView.git'
  gitBranch: 'main'
  webappName: 'dicesaralapply'
  rgName: 'this-dice-jobscraping-rg'

jobs:
- job: Checkout
  displayName: 'Checkout Code'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self

# - job: GetSecrets
#   displayName: 'Get Secrets from Key Vault'
#   dependsOn: Checkout
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: AzureKeyVault@2
#     displayName: 'Get Secrets from Key Vault'
#     inputs:
#       azureSubscription: '$(azureSubscription)'
#       KeyVaultName: 'thisdicekeyvault'
#       SecretsFilter: '*'
#       RunAsPreJob: true

# - job: BuildAndDeploy
#   displayName: 'Build and Deploy'
#   dependsOn: GetSecrets
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - template: buildAndDeploy.yaml
#     parameters:
#       containerRegistry: '$(containerRegistry)'
#       acrName: '$(acrName)'
#       imageName: '$(imageName)'
#       imageTag: '$(imageTag)'
#       dockerfilePath: '$(dockerfilePath)'
#       artifactName: '$(artifactName)'
#       imageRepository: '$(imageRepository)'
#       gitRepoUrl: '$(gitRepoUrl)'
#       gitBranch: '$(gitBranch)'

# - job: Terraform
#   displayName: 'Deploy Terraform Infrastructure'
#   dependsOn: BuildAndDeploy
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - template: terraformTasks.yaml
#     parameters:
#       workingDirectory: 'webApp'

- job: ExtractTerraformOutput
  displayName: 'Extract Terraform Output'
  dependsOn: Checkout
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureCLI@2
    displayName: 'Extract Container App URL'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: bash
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        CONTAINER_APP_URL=$(az containerapp show \
          --resource-group $(rgName) \
          --name $(webappName) \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
        echo "##vso[task.setvariable variable=CONTAINER_APP_URL]$CONTAINER_APP_URL"
  
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $githubToken = "$(GITHUB_TOKEN)"
        $repository = "updateSites"
        $branch = "main"
        $containerAppUrl = "$(CONTAINER_APP_URL)"
        
        $data = @{
          "event_type" = "update_index_html"
          "client_payload" = @{
            "url" = $containerAppUrl
          }
        } | ConvertTo-Json
        
        $command = @"
        curl -X POST https://api.github.com/repos/$repository/dispatches \
          -H 'Authorization: token $githubToken' \
          -H 'Accept: application/vnd.github.v3+json' \
          -d '$data'
        "@

        Invoke-Expression -Command $command
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)


  # - task: UsePythonVersion@0
  #     inputs:
  #       versionSpec: '3.x'
  #       addToPath: true

  #   - script: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
  #     displayName: 'Install dependencies'

  #   - script: |
  #       python $(Build.SourcesDirectory)/test.py $(pat_token) $(CalledWorkflow_github_account) $(CalledWorkflow_repo_github) $(calledworkflow_name) $(parameter1) $(parameter2)
  #     displayName: 'Trigger the Workflow'
  #     env:
  #       pat_token: $(pat_token)
  #     inputs:
  #       CalledWorkflow_github_account: $[dependencies.TriggeredWorkflow.outputs.CalledWorkflow_github_account]
  #       CalledWorkflow_repo_github: $[dependencies.TriggeredWorkflow.outputs.CalledWorkflow_repo_github]
  #       calledworkflow_name: $[dependencies.TriggeredWorkflow.outputs.calledworkflow_name]