trigger:
- main
# - none

variables:
  azureSubscription: 'dicePipeline'
  containerRegistry: 'dockerSC'
  acrName: 'thisacr'
  imageName: 'dicewebview'
  imageTag: 'latest'
  imageRepository: '$(acrName).azurecr.io/$(imageName)'
  artifactName: '$(imageName)_ARTIFACT'
  dockerfilePath: '$(Build.SourcesDirectory)/repo/Dockerfile'
  gitRepoUrl: 'https://github.com/UttU28/Dice-WebView.git'
  gitBranch: 'main'

jobs:
- job: CheckoutCode
  displayName: 'Checkout Code'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self

- job: GetSecrets
  displayName: 'Get Secrets from Key Vault'
  dependsOn: CheckoutCode
  steps:
  - task: AzureKeyVault@2
    displayName: 'Get Secrets from Key Vault'
    inputs:
      azureSubscription: '$(azureSubscription)'
      KeyVaultName: 'thisdicekeyvault'
      SecretsFilter: '*'
      RunAsPreJob: true

  - task: AzureCLI@2
    displayName: 'Extract Terraform Output'
    inputs:
      azureSubscription: $(azureSubscription)
      scriptType: bash
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        # export ARM_CLIENT_ID='$(arm-client-id)'
        # export ARM_CLIENT_SECRET='$(arm-client-secret)'
        # export ARM_TENANT_ID='$(arm-tenant-id)'
        # export ARM_SUBSCRIPTION_ID='$(arm-subscription-id)'

        CONTAINER_APP_URL=$(az containerapp show -g this-dice-jobscraping-rg -n dicesaralapply --query properties.configuration.ingress.fqdn --output tsv)

        echo "##vso[task.setvariable variable=containerAppUrl]$CONTAINER_APP_URL"
        echo "Container App URL is: $(containerAppUrl)"

# # - job: BuildAndDeploy
# #   displayName: 'Build and Deploy'
# #   dependsOn: GetSecrets
# #   pool:
# #     vmImage: 'ubuntu-latest'
# #   steps:
# #   - template: buildAndDeploy.yaml
# #     parameters:
# #       containerRegistry: '$(containerRegistry)'
# #       acrName: '$(acrName)'
# #       imageName: '$(imageName)'
# #       imageTag: '$(imageTag)'
# #       dockerfilePath: '$(dockerfilePath)'
# #       artifactName: '$(artifactName)'
# #       imageRepository: '$(imageRepository)'
# #       gitRepoUrl: '$(gitRepoUrl)'
# #       gitBranch: '$(gitBranch)'

# # - job: Terraform
# #   displayName: 'Deploy Terraform Infrastructure'
# #   dependsOn: BuildAndDeploy
# #   pool:
# #     vmImage: 'ubuntu-latest'
# #   steps:
# #   - template: terraformTasks.yaml
# #     parameters:
# #       workingDirectory: 'webApp'
